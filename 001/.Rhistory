# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
mtscars
mtcars
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
names(mtcars)
?selectinput
??selectinput
??selectInput
?selectInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(DT)
runApp()
runApp()
unqiue(mtcars$cyl)
unique(mtcars$cyl)
class(unique(mtcars$cyl))
runApp()
runApp()
mtcars$cyl
mtcars %>% filter(cyl == 1)
library(dplyr)
mtcars %>% filter(cyl == 1)
mtcars %>% filter(cyl == 2)
mtcars %>% filter(cyl == 6)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mtcars
runApp()
library(ggplot2)
library(dplyr)
shiny::runApp()
runApp()
runApp()
