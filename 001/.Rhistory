runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
names(mtcars)
?selectinput
??selectinput
??selectInput
?selectInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(DT)
runApp()
runApp()
unqiue(mtcars$cyl)
unique(mtcars$cyl)
class(unique(mtcars$cyl))
runApp()
runApp()
mtcars$cyl
mtcars %>% filter(cyl == 1)
library(dplyr)
mtcars %>% filter(cyl == 1)
mtcars %>% filter(cyl == 2)
mtcars %>% filter(cyl == 6)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mtcars
runApp()
library(ggplot2)
library(dplyr)
shiny::runApp()
runApp()
runApp()
library(shiny)
library(DT)
library(dplyr)
runApp()
runApp()
runApp()
# NOT RUN {
range(x <- sort(round(stats::rnorm(10) - 1.2, 1)))
if(any(x < 0)) cat("x contains negative values\n")
x
x
# NOT RUN {
range(x <- sort(round(stats::rnorm(10) - 1.2, 1)))
any(x < 0)
set.seed(1)
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 5)] <-  NA
any_column_NA <- function(x){
any(is.na(x))
}
replace_NA_0 <- function(x){
if_else(is.na(x),0,x)
}
mtcars %>% mutate_if(any_column_NA,replace_NA_0)
set.seed(1)
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 5)] <-  NA
mtcars
mtcars %>% select(am) %>% any_column_NA()
mtcars %>% select(am,gear) %>% any_column_NA()
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 6)] <-  NA
any_column_NA <- function(x){
any(is.na(x))
}
replace_NA_0 <- function(x){
if_else(is.na(x),0,x)
}
mtcars %>% select(am,gear) %>% any_column_NA()
mtcars
names(mtcars)
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 5)] <-  NA
mtcars
sample(1:dim(mtcars)[1], 5)
mtcars %>% select(am,gear) %>% any_column_NA()
mtcars %>% select(am) %>% replace_NA_0()
mtcars %>% select(am) %>% mutate(replace_NA_0)
mtcars %>% select(am) %>% mutate(any_column_NA(),replace_NA_0)
mtcars %>% select(am) %>% mutate(any_column_NA,replace_NA_0)
mtcars %>% select(am) %>% mutate_if(any_column_NA,replace_NA_0)
mtcars %>% select(am) %>% mutate_if(replace_NA_0)
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 5)] <-  NA
mtcars
mtcars %>% mutate_if(any_column_NA,replace_NA_0)
mtcars %>% select(am) %>% mutate_if(replace_NA_0)
mtcars %>% select(am) %>% (any_column_NA)
mtcars[sample(1:dim(mtcars)[1], 5),
sample(1:dim(mtcars)[2], 5)] <-  NA
mtcars
mtcars %>% select(am,carb) %>% (any_column_NA)
runApp()
runApp()
mtcars %>% mutate_if(is.na(.x),replace_NA_0)
mtcars %>% mutate_if(~is.na(.x),replace_NA_0)
is.na(mtcars$mpg)
mtcars %>% mutate_if(~any(is.na(.x)),replace_NA_0)
mtcars %>% mutate_if(~any(is.na(.x)),if_else(is.na(.x),0,1000))
mtcars %>% mutate_if(~any(is.na(.x)),~if_else(is.na(.x),0,1000))
runApp()
names(mtcars)
(mtcars)
mtcars
ls(rm())
runApp()
mtcars
runApp()
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
shiny::runApp()
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
library(shiny)
library(DT)
runApp()
runApp()
mtcars
shiny::runApp()
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
# Define server logic required to draw a histogram
server <- function(input, output) {
#REACTIVOS -------------------------------------------------------------------
mt <- reactive({
mtcars %>% filter(cyl %in% input$cilindros)
})
#-----------------------------------------------------------------------------
output$carplot <- renderPlot({
g <- ggplot(mt(),aes_string(x=input$var,y="mpg"))+geom_point()
if (input$reg_si_no=="Si")
{
g <- g + stat_smooth(method = "lm",formula = input$Formula)
}
if (input$Tema=="Clasico")
{
g + theme_classic()
}
else if(input$Tema=="B/N")
{
g + theme_bw()
}
else
{
g
}
})
#-----------------------------------------------------------------------------
output$cartabla <- renderDataTable({
fit <- lm(as.formula(input$Modelo),data=mt())
glance(fit) %>% mutate_if(is.numeric,~round(.x,2))
})
#-----------------------------------------------------------------------------
output$reg_Si_no <- renderUI({
if (input$reg_si_no=="Si"){
textInput("Formula",
"Escribe una fórmula:",
"y~x")}
})
#-----------------------------------------------------------------------------
}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(DT)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#--------------------------------------------------
selectInput(
inputId = "var",
label = "Selecciona la variable: ",
choices = names(mtcars),
selected = "wt"
),
#--------------------------------------------------
radioButtons("Tema",
"Elige tu estilo de ggplot",
choices = c("Default","Clasico","B/N"),
selected = "Clasico"
),
#--------------------------------------------------
selectInput(
inputId = "cilindros",
label = "Selecciona un número: ",
choices = unique(mtcars$cyl),
selected = 4,
multiple = TRUE
),
#--------------------------------------------------
radioButtons("reg_si_no",
"Quieres hacer una regresión: ",
choices = c("Si","No"),
selected = "No"
),
#--------------------------------------------------
uiOutput("reg_Si_no"),
#--------------------------------------------------
textInput("Modelo",
"Escribir formula: ",
"mpg~wt")
#--------------------------------------------------
), #fin sidebarpanel
# Show a plot of the generated distribution
mainPanel(
plotOutput("carplot"),
dataTableOutput("cartabla")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
# Define server logic required to draw a histogram
server <- function(input, output) {
#REACTIVOS -------------------------------------------------------------------
mt <- reactive({
mtcars %>% filter(cyl %in% input$cilindros)
})
#-----------------------------------------------------------------------------
output$carplot <- renderPlot({
g <- ggplot(mt(),aes_string(x=input$var,y=mpg))+geom_point()
if (input$reg_si_no=="Si")
{
g <- g + stat_smooth(method = "lm",formula = input$Formula)
}
if (input$Tema=="Clasico")
{
g + theme_classic()
}
else if(input$Tema=="B/N")
{
g + theme_bw()
}
else
{
g
}
})
#-----------------------------------------------------------------------------
output$cartabla <- renderDataTable({
fit <- lm(as.formula(input$Modelo),data=mt())
glance(fit) %>% mutate_if(is.numeric,~round(.x,2))
})
#-----------------------------------------------------------------------------
output$reg_Si_no <- renderUI({
if (input$reg_si_no=="Si"){
textInput("Formula",
"Escribe una fórmula:",
"y~x")}
})
#-----------------------------------------------------------------------------
}
library(shiny)
library(DT)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#--------------------------------------------------
selectInput(
inputId = "var",
label = "Selecciona la variable: ",
choices = names(mtcars),
selected = "wt"
),
#--------------------------------------------------
radioButtons("Tema",
"Elige tu estilo de ggplot",
choices = c("Default","Clasico","B/N"),
selected = "Clasico"
),
#--------------------------------------------------
selectInput(
inputId = "cilindros",
label = "Selecciona un número: ",
choices = unique(mtcars$cyl),
selected = 4,
multiple = TRUE
),
#--------------------------------------------------
radioButtons("reg_si_no",
"Quieres hacer una regresión: ",
choices = c("Si","No"),
selected = "No"
),
#--------------------------------------------------
uiOutput("reg_Si_no"),
#--------------------------------------------------
textInput("Modelo",
"Escribir formula: ",
"mpg~wt")
#--------------------------------------------------
), #fin sidebarpanel
# Show a plot of the generated distribution
mainPanel(
plotOutput("carplot"),
dataTableOutput("cartabla")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
# Define server logic required to draw a histogram
server <- function(input, output) {
#REACTIVOS -------------------------------------------------------------------
mt <- reactive({
mtcars %>% filter(cyl %in% input$cilindros)
})
#-----------------------------------------------------------------------------
output$carplot <- renderPlot({
g <- ggplot(mt(),aes(x=input$var,y="mpg"))+geom_point()
if (input$reg_si_no=="Si")
{
g <- g + stat_smooth(method = "lm",formula = input$Formula)
}
if (input$Tema=="Clasico")
{
g + theme_classic()
}
else if(input$Tema=="B/N")
{
g + theme_bw()
}
else
{
g
}
})
#-----------------------------------------------------------------------------
output$cartabla <- renderDataTable({
fit <- lm(as.formula(input$Modelo),data=mt())
glance(fit) %>% mutate_if(is.numeric,~round(.x,2))
})
#-----------------------------------------------------------------------------
output$reg_Si_no <- renderUI({
if (input$reg_si_no=="Si"){
textInput("Formula",
"Escribe una fórmula:",
"y~x")}
})
#-----------------------------------------------------------------------------
}
# Run the application
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(dplyr)
library(broom)#glance
# Define server logic required to draw a histogram
server <- function(input, output) {
#REACTIVOS -------------------------------------------------------------------
mt <- reactive({
mtcars %>% filter(cyl %in% input$cilindros)
})
#-----------------------------------------------------------------------------
output$carplot <- renderPlot({
g <- ggplot(mt(),aes(x=input$var,y=mpg))+geom_point()
if (input$reg_si_no=="Si")
{
g <- g + stat_smooth(method = "lm",formula = input$Formula)
}
if (input$Tema=="Clasico")
{
g + theme_classic()
}
else if(input$Tema=="B/N")
{
g + theme_bw()
}
else
{
g
}
})
#-----------------------------------------------------------------------------
output$cartabla <- renderDataTable({
fit <- lm(as.formula(input$Modelo),data=mt())
glance(fit) %>% mutate_if(is.numeric,~round(.x,2))
})
#-----------------------------------------------------------------------------
output$reg_Si_no <- renderUI({
if (input$reg_si_no=="Si"){
textInput("Formula",
"Escribe una fórmula:",
"y~x")}
})
#-----------------------------------------------------------------------------
}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(DT)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#--------------------------------------------------
selectInput(
inputId = "var",
label = "Selecciona la variable: ",
choices = names(mtcars),
selected = "wt"
),
#--------------------------------------------------
radioButtons("Tema",
"Elige tu estilo de ggplot",
choices = c("Default","Clasico","B/N"),
selected = "Clasico"
),
#--------------------------------------------------
selectInput(
inputId = "cilindros",
label = "Selecciona un número: ",
choices = unique(mtcars$cyl),
selected = 4,
multiple = TRUE
),
#--------------------------------------------------
radioButtons("reg_si_no",
"Quieres hacer una regresión: ",
choices = c("Si","No"),
selected = "No"
),
#--------------------------------------------------
uiOutput("reg_Si_no"),
#--------------------------------------------------
textInput("Modelo",
"Escribir formula: ",
"mpg~wt")
#--------------------------------------------------
), #fin sidebarpanel
# Show a plot of the generated distribution
mainPanel(
plotOutput("carplot"),
dataTableOutput("cartabla")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
runApp()
